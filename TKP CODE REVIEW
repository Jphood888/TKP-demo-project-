<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>TKP Code Review Portal</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css" />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@300;400;500&display=swap" rel="stylesheet">
  <style>

/* Copy Protection Styles */
    * {
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none;
      -webkit-touch-callout: none;
      -webkit-tap-highlight-color: transparent;
    }

    :root {
      --primary-bg: #0f172a;
      --secondary-bg: #1e293b;
      --accent-bg: #334155;
      --primary-text: #f8fafc;
      --secondary-text: #cbd5e1;
      --accent-text: #64748b;
      --border-color: #374151;
      --accent-color: #3b82f6;
      --success-color: #10b981;
      --warning-color: #f59e0b;
      --code-bg: #1e1e1e;
      --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
      --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Inter', system-ui, -apple-system, sans-serif;
      background: linear-gradient(135deg, var(--primary-bg) 0%, #1a202c 100%);
      color: var(--primary-text);
      line-height: 1.6;
      min-height: 100vh;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 2rem;
    }

    /* Header */
    .header {
      text-align: center;
      margin-bottom: 3rem;
      padding: 2rem 0;
      background: var(--secondary-bg);
      border-radius: 1rem;
      box-shadow: var(--shadow-lg);
      border: 1px solid var(--border-color);
    }

    .header h1 {
      font-size: 2.5rem;
      font-weight: 700;
      color: var(--primary-text);
      margin-bottom: 0.5rem;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 1rem;
    }

    .header .subtitle {
      color: var(--secondary-text);
      font-size: 1.1rem;
      font-weight: 400;
    }

    /* Controls */
    .controls {
      display: flex;
      justify-content: center;
      gap: 1rem;
      margin-bottom: 2rem;
      flex-wrap: wrap;
    }

    .control-btn {
      background: var(--accent-color);
      color: white;
      border: none;
      padding: 0.75rem 1.5rem;
      border-radius: 0.5rem;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s ease;
      font-size: 0.9rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .control-btn:hover {
      background: #2563eb;
      transform: translateY(-1px);
      box-shadow: var(--shadow);
    }

    .control-btn.secondary {
      background: var(--accent-bg);
      color: var(--primary-text);
    }

    .control-btn.secondary:hover {
      background: #475569;
    }

    /* Projects Container */
    .projects-container {
      display: grid;
      gap: 2rem;
    }

    /* Project Card */
    .project-card {
      background: var(--secondary-bg);
      border-radius: 1rem;
      border: 1px solid var(--border-color);
      overflow: hidden;
      transition: all 0.3s ease;
    }

    .project-card:hover {
      transform: translateY(-2px);
      box-shadow: var(--shadow-lg);
      border-color: var(--accent-color);
    }

    /* Author Header */
    .author-header {
      background: linear-gradient(135deg, var(--accent-color), #2563eb);
      color: white;
      padding: 1.5rem;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: space-between;
      transition: all 0.2s ease;
    }

    .author-header:hover {
      background: linear-gradient(135deg, #2563eb, #1d4ed8);
    }

    .author-info {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .author-name {
      font-size: 1.2rem;
      font-weight: 600;
    }

    .author-stats {
      background: rgba(255, 255, 255, 0.2);
      padding: 0.25rem 0.75rem;
      border-radius: 1rem;
      font-size: 0.85rem;
      font-weight: 500;
    }

    .toggle-icon {
      font-size: 1.2rem;
      transition: transform 0.2s ease;
    }

    .toggle-icon.expanded {
      transform: rotate(90deg);
    }

    /* Apps Container */
    .apps-container {
      display: none;
      padding: 1.5rem;
      background: var(--primary-bg);
    }

    .apps-container.visible {
      display: block;
    }

    /* App Section */
    .app-section {
      margin-bottom: 2rem;
      last-child:margin-bottom: 0;
    }

    .app-header {
      background: var(--accent-bg);
      border-radius: 0.75rem;
      padding: 1rem 1.5rem;
      cursor: pointer;
      transition: all 0.2s ease;
      border: 1px solid var(--border-color);
    }

    .app-header:hover {
      background: #475569;
      transform: translateX(4px);
    }

    .app-title {
      display: flex;
      align-items: center;
      justify-content: space-between;
      color: var(--primary-text);
      font-weight: 500;
      font-size: 1.1rem;
    }

    .app-info {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .file-count {
      background: var(--warning-color);
      color: white;
      padding: 0.2rem 0.6rem;
      border-radius: 0.5rem;
      font-size: 0.8rem;
      font-weight: 500;
    }

    /* Files Container */
    .files-container {
      display: none;
      margin-top: 1rem;
      padding-left: 1rem;
    }

    .files-container.visible {
      display: block;
    }

    /* File Item */
    .file-item {
      background: var(--secondary-bg);
      border-radius: 0.5rem;
      margin-bottom: 1rem;
      border: 1px solid var(--border-color);
      overflow: hidden;
    }

    .file-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 1rem 1.5rem;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .file-header:hover {
      background: var(--accent-bg);
    }

    .file-info {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .file-name {
      font-weight: 500;
      color: var(--primary-text);
    }

    .file-lang {
      background: var(--success-color);
      color: white;
      padding: 0.2rem 0.6rem;
      border-radius: 0.25rem;
      font-size: 0.8rem;
      font-weight: 500;
      font-family: 'JetBrains Mono', monospace;
    }

    .toggle-code-btn {
      background: transparent;
      border: 1px solid var(--accent-color);
      color: var(--accent-color);
      padding: 0.5rem 1rem;
      border-radius: 0.25rem;
      cursor: pointer;
      font-size: 0.85rem;
      font-weight: 500;
      transition: all 0.2s ease;
    }

    .toggle-code-btn:hover {
      background: var(--accent-color);
      color: white;
    }

    /* Code Block */
    .code-block {
      display: none;
      background: var(--code-bg);
      border-top: 1px solid var(--border-color);
      max-height: 500px;
      overflow-y: auto;
    }

    .code-block.visible {
      display: block;
    }

    .code-block pre {
      margin: 0;
      padding: 1.5rem;
      background: transparent;
      font-family: 'JetBrains Mono', monospace;
      font-size: 0.9rem;
      line-height: 1.5;
    }

    .code-block code {
      background: transparent;
      font-family: 'JetBrains Mono', monospace;
    }

    /* Scrollbar Styling */
    .code-block::-webkit-scrollbar {
      width: 8px;
    }

    .code-block::-webkit-scrollbar-track {
      background: var(--primary-bg);
    }

    .code-block::-webkit-scrollbar-thumb {
      background: var(--accent-bg);
      border-radius: 4px;
    }

    .code-block::-webkit-scrollbar-thumb:hover {
      background: #475569;
    }

    /* Loading State */
    .loading {
      text-align: center;
      padding: 3rem;
      color: var(--secondary-text);
    }

    .loading-spinner {
      display: inline-block;
      width: 2rem;
      height: 2rem;
      border: 3px solid var(--accent-bg);
      border-top: 3px solid var(--accent-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-bottom: 1rem;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    /* Empty State */
    .empty-state {
      text-align: center;
      padding: 4rem 2rem;
      color: var(--secondary-text);
    }

    .empty-state h3 {
      font-size: 1.5rem;
      margin-bottom: 1rem;
      color: var(--accent-text);
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .container {
        padding: 1rem;
      }

      .header h1 {
        font-size: 2rem;
        flex-direction: column;
        gap: 0.5rem;
      }

      .controls {
        flex-direction: column;
        align-items: center;
      }

      .control-btn {
        width: 100%;
        max-width: 300px;
        justify-content: center;
      }

      .author-header {
        flex-direction: column;
        gap: 1rem;
        text-align: center;
      }

      .app-title {
        flex-direction: column;
        gap: 0.5rem;
        text-align: center;
      }

      .file-header {
        flex-direction: column;
        gap: 1rem;
        text-align: center;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>
        <span>üîç</span>
        <span>TKP App Review Project</span>
      </h1>
      <p class="subtitle">Browse and explore code repositories</p>
    </div>

    <div class="controls">
      <button class="control-btn" onclick="toggleAllProjects()">
        <span>üìÇ</span>
        <span>Expand All</span>
      </button>
      <button class="control-btn secondary" onclick="collapseAllProjects()">
        <span>üìÅ</span>
        <span>Collapse All</span>
      </button>
      <button class="control-btn" onclick="showAllCode()">
        <span>üëÅÔ∏è</span>
        <span>Show All Code</span>
      </button>
      <button class="control-btn secondary" onclick="hideAllCode()">
        <span>üôà</span>
        <span>Hide All Code</span>
      </button>
    </div>

    <div id="loading" class="loading">
      <div class="loading-spinner"></div>
      <p>Loading projects...</p>
    </div>

    <div id="projects" class="projects-container"></div>

    <div id="emptyState" class="empty-state" style="display: none;">
      <h3>üìã No Projects Available</h3>
      <p>There are currently no code projects to display.</p>
    </div>
  </div>

  <!-- Prism Syntax Highlighter -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-markup.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-css.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-javascript.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-python.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-java.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-cpp.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-json.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-sql.min.js"></script>

  <script>
    const DEPLOYED_URL = 'https://script.google.com/macros/s/AKfycbwTLIrWJjIibUScRnKCiVAr1aYjqf1HKrSAn0nPB-drrTzdZIDXJ_-08hMgD0uVoqRU/exec';
    let allProjects = {};
    let uniqueIdCounter = 0;

    // Generate unique IDs for elements
    function generateId() {
      return `element_${uniqueIdCounter++}`;
    }

    // Get language class for syntax highlighting
    function getLanguageClass(lang) {
      const langMap = {
        'markup': 'markup',
        'html': 'markup',
        'xml': 'markup',
        'css': 'css',
        'javascript': 'javascript',
        'js': 'javascript',
        'python': 'python',
        'py': 'python',
        'java': 'java',
        'cpp': 'cpp',
        'c++': 'cpp',
        'json': 'json',
        'sql': 'sql'
      };
      return langMap[lang.toLowerCase()] || 'text';
    }

    // Get language display name
    function getLanguageDisplay(lang) {
      const displayMap = {
        'markup': 'HTML',
        'html': 'HTML',
        'xml': 'XML',
        'css': 'CSS',
        'javascript': 'JavaScript',
        'js': 'JavaScript',
        'python': 'Python',
        'py': 'Python',
        'java': 'Java',
        'cpp': 'C++',
        'c++': 'C++',
        'json': 'JSON',
        'sql': 'SQL'
      };
      return displayMap[lang.toLowerCase()] || lang.toUpperCase();
    }

    // Toggle project visibility
    function toggleProject(projectId) {
      const container = document.getElementById(`apps_${projectId}`);
      const icon = document.getElementById(`icon_${projectId}`);
      
      if (container.classList.contains('visible')) {
        container.classList.remove('visible');
        icon.classList.remove('expanded');
      } else {
        container.classList.add('visible');
        icon.classList.add('expanded');
      }
    }

    // Toggle app visibility
    function toggleApp(appId) {
      const container = document.getElementById(`files_${appId}`);
      const icon = document.getElementById(`app_icon_${appId}`);
      
      if (container.classList.contains('visible')) {
        container.classList.remove('visible');
        icon.classList.remove('expanded');
      } else {
        container.classList.add('visible');
        icon.classList.add('expanded');
      }
    }

    // Toggle code visibility
    function toggleCode(codeId) {
      const codeBlock = document.getElementById(`code_${codeId}`);
      const button = document.getElementById(`btn_${codeId}`);
      
      if (codeBlock.classList.contains('visible')) {
        codeBlock.classList.remove('visible');
        button.textContent = 'Show Code';
      } else {
        codeBlock.classList.add('visible');
        button.textContent = 'Hide Code';
        // Re-highlight the code
        Prism.highlightAllUnder(codeBlock);
      }
    }

    // Toggle all projects
    function toggleAllProjects() {
      const allAppsContainers = document.querySelectorAll('.apps-container');
      const allIcons = document.querySelectorAll('.toggle-icon');
      
      allAppsContainers.forEach(container => {
        container.classList.add('visible');
      });
      
      allIcons.forEach(icon => {
        icon.classList.add('expanded');
      });
    }

    // Collapse all projects
    function collapseAllProjects() {
      const allAppsContainers = document.querySelectorAll('.apps-container');
      const allFilesContainers = document.querySelectorAll('.files-container');
      const allIcons = document.querySelectorAll('.toggle-icon');
      
      allAppsContainers.forEach(container => {
        container.classList.remove('visible');
      });
      
      allFilesContainers.forEach(container => {
        container.classList.remove('visible');
      });
      
      allIcons.forEach(icon => {
        icon.classList.remove('expanded');
      });
    }

    // Show all code
    function showAllCode() {
      const allCodeBlocks = document.querySelectorAll('.code-block');
      const allButtons = document.querySelectorAll('.toggle-code-btn');
      
      allCodeBlocks.forEach(block => {
        block.classList.add('visible');
        Prism.highlightAllUnder(block);
      });
      
      allButtons.forEach(btn => {
        btn.textContent = 'Hide Code';
      });
    }

    // Hide all code
    function hideAllCode() {
      const allCodeBlocks = document.querySelectorAll('.code-block');
      const allButtons = document.querySelectorAll('.toggle-code-btn');
      
      allCodeBlocks.forEach(block => {
        block.classList.remove('visible');
      });
      
      allButtons.forEach(btn => {
        btn.textContent = 'Show Code';
      });
    }

    // Load and display projects
    function loadProjects() {
      document.getElementById('loading').style.display = 'block';
      document.getElementById('projects').style.display = 'none';
      document.getElementById('emptyState').style.display = 'none';

      fetch(DEPLOYED_URL + '?action=view')
        .then(res => res.json())
        .then(data => {
          allProjects = data;
          displayProjects();
        })
        .catch(error => {
          console.error('Error loading projects:', error);
          document.getElementById('loading').style.display = 'none';
          document.getElementById('emptyState').style.display = 'block';
        });
    }

    // Display projects in the UI
    function displayProjects() {
      const container = document.getElementById('projects');
      container.innerHTML = '';
      
      if (Object.keys(allProjects).length === 0) {
        document.getElementById('loading').style.display = 'none';
        document.getElementById('emptyState').style.display = 'block';
        return;
      }

      // Sort authors alphabetically
      const sortedAuthors = Object.keys(allProjects).sort();
      
      sortedAuthors.forEach(author => {
        const projectId = generateId();
        const apps = allProjects[author];
        
        // Calculate total files across all apps
        let totalFiles = 0;
        let totalApps = Object.keys(apps).length;
        
        Object.values(apps).forEach(app => {
          totalFiles += Object.keys(app).length;
        });

        // Create project card
        const projectCard = document.createElement('div');
        projectCard.className = 'project-card';
        
        projectCard.innerHTML = `
          <div class="author-header" onclick="toggleProject('${projectId}')">
            <div class="author-info">
              <span class="author-name"> <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" viewBox="0 0 24 24"><path fill="none" stroke="#ddc75f" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7a4 4 0 1 0 8 0a4 4 0 0 0-8 0M6 21v-2a4 4 0 0 1 4-4h2.5m4.501 4a2 2 0 1 0 4 0a2 2 0 1 0-4 0m2-3.5V17m0 4v1.5m3.031-5.25l-1.299.75m-3.463 2l-1.3.75m0-3.5l1.3.75m3.463 2l1.3.75"></path></svg> ${author}</span>
              <span class="author-stats">${totalApps} apps ‚Ä¢ ${totalFiles} files</span>
            </div>
            <span class="toggle-icon" id="icon_${projectId}">‚ñ∂</span>
          </div>
          <div class="apps-container" id="apps_${projectId}">
            ${generateAppsHTML(apps, author)}
          </div>
        `;
        
        container.appendChild(projectCard);
      });

      document.getElementById('loading').style.display = 'none';
      document.getElementById('projects').style.display = 'block';
    }

    // Generate HTML for apps
    function generateAppsHTML(apps, author) {
      let html = '';
      
      // Sort apps alphabetically
      const sortedApps = Object.keys(apps).sort();
      
      sortedApps.forEach(appName => {
        const appId = generateId();
        const files = apps[appName];
        const fileCount = Object.keys(files).length;
        
        html += `
          <div class="app-section">
            <div class="app-header" onclick="toggleApp('${appId}')">
              <div class="app-title">
                <div class="app-info">
                  <span>üì¶ ${appName}</span>
                  <span class="file-count">${fileCount} files</span>
                </div>
                <span class="toggle-icon" id="app_icon_${appId}">‚ñ∂</span>
              </div>
            </div>
            <div class="files-container" id="files_${appId}">
              ${generateFilesHTML(files)}
            </div>
          </div>
        `;
      });
      
      return html;
    }

    // Generate HTML for files
    function generateFilesHTML(files) {
      let html = '';
      
      // Sort files alphabetically
      const sortedFiles = Object.keys(files).sort();
      
      sortedFiles.forEach(fileName => {
        const fileId = generateId();
        const fileData = files[fileName];
        const langClass = getLanguageClass(fileData.lang);
        const langDisplay = getLanguageDisplay(fileData.lang);
        
        html += `
          <div class="file-item">
            <div class="file-header">
              <div class="file-info">
                <span class="file-name">üìÑ ${fileName}</span>
                <span class="file-lang">${langDisplay}</span>
              </div>
              <button class="toggle-code-btn" id="btn_${fileId}" onclick="toggleCode('${fileId}')">
                Show Code
              </button>
            </div>
            <div class="code-block" id="code_${fileId}">
              <pre><code class="language-${langClass}">${escapeHtml(fileData.content)}</code></pre>
            </div>
          </div>
        `;
      });
      
      return html;
    }

    // Escape HTML characters
    function escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }

    // Initialize the application
    function init() {
      loadProjects();
    }

    // Load projects on page load
    window.addEventListener('load', init);
  </script>
</body>
</html>
